import os
import json
import requests
from datetime import datetime

# Define directories
BASE_DIRECTORY = "ยง_mkfiles"
REPLIT_API_TOKEN = "your_replit_api_token"
HEADERS = {"Authorization": f"Bearer {REPLIT_API_TOKEN}"}

# Ensure base directory is created
def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

# Function to retrieve all Replit projects
def get_replit_projects():
    url = "https://api.replit.com/v0/projects"
    response = requests.get(url, headers=HEADERS)
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching Replit projects: {response.status_code}")
        return []

# Function to retrieve files from a specific Replit project
def get_project_files(project_id):
    url = f"https://api.replit.com/v0/projects/{project_id}/files"
    response = requests.get(url, headers=HEADERS)
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching files for project ID {project_id}: {response.status_code}")
        return []

# Archive data in a centralized structure
def archive_files(data, project_name="project", source="replit"):
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    project_directory = os.path.join(BASE_DIRECTORY, f"{source}_{project_name}_{timestamp}")
    create_directory(project_directory)
    
    with open(os.path.join(project_directory, f"{project_name}_data.json"), "w") as f:
        json.dump(data, f, indent=4)

# Function to log interactions (for ChatGPT or other)
def log_interaction(user_input, gpt_response, log_filename="chatgpt_interaction_log.json"):
    log_directory = os.path.join(BASE_DIRECTORY, "chatgpt_logs")
    create_directory(log_directory)
    
    log_data = {
        "user_input": user_input,
        "gpt_response": gpt_response,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    log_file_path = os.path.join(log_directory, log_filename)
    
    # Append log data to existing file
    if os.path.exists(log_file_path):
        with open(log_file_path, "r+") as file:
            data = json.load(file)
            data.append(log_data)
            file.seek(0)
            json.dump(data, file, indent=4)
    else:
        with open(log_file_path, "w") as file:
            json.dump([log_data], file, indent=4)

# Main Process
def main():
    # Example: Retrieve Replit projects and files, then archive them
    projects = get_replit_projects()
    for project in projects:
        project_name = project['title']
        project_id = project['id']
        project_files = get_project_files(project_id)
        archive_files(project_files, project_name, source="replit")

    # Example: Log a ChatGPT interaction
    user_input = "How do I optimize my project?"
    gpt_response = "Here are the steps to optimize your project..."
    log_interaction(user_input, gpt_response)

if __name__ == "__main__":
    main()
